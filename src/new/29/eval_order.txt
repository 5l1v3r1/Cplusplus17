/*
Copyright (C) 2018 Adrian D. Finlay. All rights reserved.

Licensed under the MIT License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://opensource.org/licenses/MIT

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER INCLUDING AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
==============================================================================
**/

/* #29 Stricter Order of Evaluation Rules */
Excerpt adapted from #29 http://bit.ly/Cplusplyus17Ft

C++17 puts into law practices that have been expressed in code in the
past but never explicitly stated in the standard, in an e ort to avoid
unde ned behavior. Longtime C++ expert Herb Sutter is an author of
the paper describing this in more detail, which you should de nitely
read.

The new changes are [1]:

•“Post x expressions are evaluated from left to right. This includes
functions calls and member selection expressions.”

•“Assignment expressions are evaluated from right to left. This
includes compound assignments.”

• “Operands to shift operators are evaluated from left to right.”

•“The order of evaluation of an expression involving an overloaded
operator is determined by the order associated with the
corresponding built-in operator, not the rules for function calls.
This rule is to support generic programming and extensive use of
overloaded operators, which are distinctive features of modern
C++.”

•“The function is evaluated before all its arguments, but any pair of
arguments (from the argument list) is indeterminately sequenced;
meaning that one is evaluated before the other but the order is not
specified; it is guaranteed that the function is evaluated before the
argument”

[1] — OpenSTD: DR: Matching of template template-arguments
excludes compatible templates (http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html)